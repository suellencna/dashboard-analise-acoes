#!/usr/bin/env python3
"""
üß™ TESTE DO FLUXO COMPLETO - HOTMART ‚Üí RAILWAY ‚Üí NEON ‚Üí GMAIL ‚Üí RENDER
=======================================================================

Este script testa todo o fluxo de integra√ß√£o:
1. Simula webhook da Hotmart
2. Testa cadastro no banco NEON
3. Testa envio de email
4. Testa ativa√ß√£o de conta
5. Testa login no sistema RENDER
"""

import requests
import json
import time
import os
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# URLs dos servi√ßos
RAILWAY_URL = os.environ.get('RAILWAY_APP_URL', 'https://web-production-040d1.up.railway.app')
RENDER_URL = os.environ.get('RENDER_APP_URL', 'https://ponto-otimo-invest.onrender.com')

def testar_health_check():
    """Testar se o webhook est√° funcionando"""
    print("üîç Testando Health Check...")
    try:
        response = requests.get(f"{RAILWAY_URL}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Health Check OK")
            return True
        else:
            print(f"‚ùå Health Check falhou: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro no Health Check: {e}")
        return False

def testar_webhook_hotmart():
    """Simular webhook da Hotmart"""
    print("\nüõí Testando Webhook da Hotmart...")
    
    # Dados simulados de uma compra na Hotmart
    webhook_data = {
        "buyer": {
            "email": "teste@exemplo.com",
            "name": "Cliente Teste"
        },
        "transaction": {
            "id": "TEST123456789"
        },
        "status": "approved",
        "product": {
            "id": "PROD123",
            "name": "Ponto √ìtimo Invest"
        }
    }
    
    try:
        response = requests.post(
            f"{RAILWAY_URL}/webhook/hotmart",
            json=webhook_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        if response.status_code == 200:
            print("‚úÖ Webhook processado com sucesso")
            print(f"   Resposta: {response.json()}")
            return True
        else:
            print(f"‚ùå Webhook falhou: {response.status_code}")
            print(f"   Erro: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro no webhook: {e}")
        return False

def testar_email():
    """Testar envio de email"""
    print("\nüìß Testando Envio de Email...")
    
    email_data = {
        "email": "suellencna@hotmail.com",
        "nome": "Suellen Teste"
    }
    
    try:
        response = requests.post(
            f"{RAILWAY_URL}/test-email",
            json=email_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        if response.status_code == 200:
            print("‚úÖ Email enviado com sucesso")
            print(f"   Resposta: {response.json()}")
            return True
        else:
            print(f"‚ùå Email falhou: {response.status_code}")
            print(f"   Erro: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro no envio de email: {e}")
        return False

def testar_ativacao():
    """Testar ativa√ß√£o de conta"""
    print("\nüîë Testando Ativa√ß√£o de Conta...")
    
    # Token de teste (voc√™ pode pegar um real do banco)
    token_teste = "token_teste_123"
    
    try:
        response = requests.get(f"{RAILWAY_URL}/ativar/{token_teste}", timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ P√°gina de ativa√ß√£o carregada")
            return True
        elif response.status_code == 400:
            print("‚ö†Ô∏è Token inv√°lido (esperado para token de teste)")
            return True
        else:
            print(f"‚ùå Ativa√ß√£o falhou: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro na ativa√ß√£o: {e}")
        return False

def testar_sistema_render():
    """Testar se o sistema RENDER est√° funcionando"""
    print("\nüåê Testando Sistema RENDER...")
    
    try:
        response = requests.get(RENDER_URL, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Sistema RENDER funcionando")
            return True
        else:
            print(f"‚ùå Sistema RENDER falhou: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro no sistema RENDER: {e}")
        return False

def main():
    """Executar todos os testes"""
    print("üöÄ INICIANDO TESTE DO FLUXO COMPLETO")
    print("=" * 50)
    
    resultados = []
    
    # 1. Health Check
    resultados.append(("Health Check", testar_health_check()))
    
    # 2. Webhook Hotmart
    resultados.append(("Webhook Hotmart", testar_webhook_hotmart()))
    
    # 3. Envio de Email
    resultados.append(("Envio de Email", testar_email()))
    
    # 4. Ativa√ß√£o de Conta
    resultados.append(("Ativa√ß√£o de Conta", testar_ativacao()))
    
    # 5. Sistema RENDER
    resultados.append(("Sistema RENDER", testar_sistema_render()))
    
    # Resumo dos resultados
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES")
    print("=" * 50)
    
    sucessos = 0
    total = len(resultados)
    
    for teste, sucesso in resultados:
        status = "‚úÖ PASSOU" if sucesso else "‚ùå FALHOU"
        print(f"{teste:20} {status}")
        if sucesso:
            sucessos += 1
    
    print("-" * 50)
    print(f"Total: {sucessos}/{total} testes passaram")
    
    if sucessos == total:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ O fluxo completo est√° funcionando perfeitamente!")
    else:
        print(f"\n‚ö†Ô∏è {total - sucessos} teste(s) falharam")
        print("‚ùå Verifique os erros acima e corrija os problemas")
    
    print("\nüîó URLs dos servi√ßos:")
    print(f"   Railway (Webhook): {RAILWAY_URL}")
    print(f"   Render (Sistema):  {RENDER_URL}")
    
    print("\nüìã Pr√≥ximos passos:")
    print("   1. Configure as vari√°veis de ambiente no Railway")
    print("   2. Configure as vari√°veis de ambiente no Render")
    print("   3. Configure o webhook na Hotmart")
    print("   4. Teste com uma compra real")

if __name__ == "__main__":
    main()
