#!/usr/bin/env python3
"""
Diagn√≥stico completo do MailerSend
"""

import os
import sys

print("=" * 80)
print("üîç DIAGN√ìSTICO MAILERSEND")
print("=" * 80)

# 1. Verificar vari√°veis de ambiente
print("\n1Ô∏è‚É£ VERIFICANDO VARI√ÅVEIS DE AMBIENTE:")
print("-" * 80)

MAILERSEND_API_KEY = os.environ.get('MAILERSEND_API_KEY')
FROM_EMAIL = os.environ.get('FROM_EMAIL', 'noreply@pontootimo.com.br')
APP_URL = os.environ.get('APP_URL', 'https://web-production-e66d.up.railway.app')

if MAILERSEND_API_KEY:
    print(f"‚úÖ MAILERSEND_API_KEY: Configurada ({MAILERSEND_API_KEY[:20]}...)")
else:
    print("‚ùå MAILERSEND_API_KEY: N√ÉO CONFIGURADA")
    
print(f"‚úÖ FROM_EMAIL: {FROM_EMAIL}")
print(f"‚úÖ APP_URL: {APP_URL}")

# 2. Testar importa√ß√£o do MailerSend
print("\n2Ô∏è‚É£ TESTANDO IMPORTA√á√ÉO MAILERSEND:")
print("-" * 80)

try:
    from mailersend import emails
    print("‚úÖ Biblioteca 'mailersend' importada com sucesso")
except ImportError as e:
    print(f"‚ùå ERRO ao importar 'mailersend': {e}")
    print("   Execute: pip install mailersend==0.5.8")
    sys.exit(1)

# 3. Testar conex√£o com API
print("\n3Ô∏è‚É£ TESTANDO CONEX√ÉO COM API MAILERSEND:")
print("-" * 80)

if not MAILERSEND_API_KEY:
    print("‚ùå Imposs√≠vel testar - API Key n√£o configurada")
    sys.exit(1)

try:
    mailer = emails.NewEmail(MAILERSEND_API_KEY)
    print("‚úÖ Objeto MailerSend criado com sucesso")
    
    # Tentar criar um email de teste (sem enviar)
    mail_body = {}
    mail_from = {
        "name": "Teste Diagn√≥stico",
        "email": FROM_EMAIL,
    }
    recipients = [
        {
            "name": "Teste",
            "email": "teste@exemplo.com",
        }
    ]
    
    mailer.set_mail_from(mail_from, mail_body)
    mailer.set_mail_to(recipients, mail_body)
    mailer.set_subject("Teste", mail_body)
    mailer.set_html_content("<p>Teste</p>", mail_body)
    
    print("‚úÖ Email de teste montado com sucesso")
    print("‚úÖ Estrutura do email v√°lida")
    
except Exception as e:
    print(f"‚ùå ERRO ao criar email: {e}")
    sys.exit(1)

# 4. Tentar envio REAL
print("\n4Ô∏è‚É£ TENTANDO ENVIO REAL:")
print("-" * 80)
print("üìß Enviando para: suellencna@gmail.com")

try:
    mailer = emails.NewEmail(MAILERSEND_API_KEY)
    
    mail_body = {}
    mail_from = {
        "name": "Diagn√≥stico MailerSend",
        "email": FROM_EMAIL,
    }
    recipients = [
        {
            "name": "Suellen",
            "email": "suellencna@gmail.com",
        }
    ]
    
    mailer.set_mail_from(mail_from, mail_body)
    mailer.set_mail_to(recipients, mail_body)
    mailer.set_subject("üîß DIAGN√ìSTICO - MailerSend Test", mail_body)
    mailer.set_html_content("""
        <html>
            <body>
                <h1>TESTE DE DIAGN√ìSTICO</h1>
                <p>Se voc√™ recebeu este email, o MailerSend est√° funcionando!</p>
                <p><strong>Hora do envio:</strong> """ + str(os.popen('date').read()) + """</p>
            </body>
        </html>
    """, mail_body)
    
    print("\nüì§ Enviando email...")
    response = mailer.send(mail_body)
    
    print("\n‚úÖ RESPOSTA DO MAILERSEND:")
    print(f"   Response: {response}")
    print("\n‚úÖ EMAIL ENVIADO COM SUCESSO!")
    print("   Aguarde 1-2 minutos e verifique a caixa de entrada do Gmail")
    
except Exception as e:
    print(f"\n‚ùå ERRO AO ENVIAR EMAIL:")
    print(f"   Tipo: {type(e).__name__}")
    print(f"   Mensagem: {str(e)}")
    
    # Detalhes adicionais do erro
    import traceback
    print("\nüìã STACK TRACE COMPLETO:")
    print("-" * 80)
    traceback.print_exc()

print("\n" + "=" * 80)
print("üèÅ DIAGN√ìSTICO CONCLU√çDO")
print("=" * 80)
