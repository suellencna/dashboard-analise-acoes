#!/usr/bin/env python3
"""
TESTE DO SISTEMA EXECUT√ÅVEL - PONTO √ìTIMO INVEST
===============================================

Este script testa o sistema execut√°vel local.
Execute ap√≥s iniciar o sistema_completo_executavel.py
"""

import requests
import json
import time

# Configura√ß√µes
LOCAL_URL = "http://localhost:5000"
TEST_EMAIL = "suellencna@hotmail.com"
TEST_NAME = "Suellen Teste Local"

print("üß™ TESTE DO SISTEMA EXECUT√ÅVEL")
print("=" * 40)

def test_health_check():
    """Testar health check"""
    print("\nüîç Testando Health Check...")
    try:
        response = requests.get(f"{LOCAL_URL}/health", timeout=5)
        if response.status_code == 200:
            print(f"‚úÖ Health Check OK: {response.text}")
            return True
        else:
            print(f"‚ùå Health Check falhou: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro no Health Check: {e}")
        return False

def test_email_sending():
    """Testar envio de email"""
    print("\nüìß Testando Envio de Email...")
    payload = {
        "email": TEST_EMAIL,
        "nome": TEST_NAME
    }
    try:
        response = requests.post(f"{LOCAL_URL}/test-email", json=payload, timeout=30)
        data = response.json()
        print(f"Status: {data.get('status')}")
        print(f"Mensagem: {data.get('message')}")
        if data.get('status') == 'success':
            print("‚úÖ Teste de email bem-sucedido!")
            return True
        else:
            print(f"‚ùå Teste de email falhou: {data.get('details')}")
            return False
    except Exception as e:
        print(f"‚ùå Erro no teste de email: {e}")
        return False

def simulate_hotmart_webhook():
    """Simular webhook Hotmart"""
    print("\nüîÑ Simulando Webhook Hotmart...")
    payload = {
        "id": "EV12345678",
        "event": "PURCHASE_APPROVED",
        "status": "approved",
        "product": {
            "id": 12345,
            "name": "Produto Teste Ponto √ìtimo"
        },
        "buyer": {
            "email": TEST_EMAIL,
            "name": TEST_NAME,
            "checkout_phone": "5511987654321"
        },
        "purchase": {
            "price": 99.90,
            "currency": "BRL"
        }
    }
    try:
        response = requests.post(f"{LOCAL_URL}/webhook", json=payload, timeout=30)
        data = response.json()
        print(f"Status: {data.get('status')}")
        print(f"Mensagem: {data.get('message')}")
        if response.status_code == 200 and data.get('status') == 'success':
            print("‚úÖ Simula√ß√£o de webhook bem-sucedida!")
            return True
        else:
            print(f"‚ùå Simula√ß√£o de webhook falhou: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro na simula√ß√£o de webhook: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("Aguardando sistema iniciar...")
    time.sleep(2)
    
    # Testar health check
    if not test_health_check():
        print("\n‚ùå Sistema n√£o est√° funcionando. Verifique se o sistema_completo_executavel.py est√° rodando.")
        return
    
    # Testar envio de email
    test_email_sending()
    
    # Simular webhook
    simulate_hotmart_webhook()
    
    print("\nüéâ Teste conclu√≠do!")
    print("üìù Verifique os logs do sistema para mais detalhes.")
    print("üìß Verifique o email para o link de ativa√ß√£o.")

if __name__ == "__main__":
    main()
