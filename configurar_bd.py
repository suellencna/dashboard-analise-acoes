#!/usr/bin/env python3
"""
Script para configurar a conex√£o com o banco de dados
"""

import os
import sqlalchemy
from argon2 import PasswordHasher

print("=== CONFIGURA√á√ÉO DO BANCO DE DADOS ===")

# Verificar se j√° existe um arquivo .env
env_file = ".env"
if os.path.exists(env_file):
    print("‚úÖ Arquivo .env encontrado")
    with open(env_file, 'r') as f:
        content = f.read()
        if 'DATABASE_URL' in content:
            print("‚úÖ DATABASE_URL j√° configurada no .env")
        else:
            print("‚ö†Ô∏è  DATABASE_URL n√£o encontrada no .env")
else:
    print("‚ö†Ô∏è  Arquivo .env n√£o encontrado")

# Solicitar URL do banco
print("\nPor favor, forne√ßa a URL de conex√£o com o banco de dados Neon:")
print("Exemplo: postgresql://usuario:senha@host:porta/database")
print("(A senha ser√° mascarada por seguran√ßa)")

DATABASE_URL = input("\nURL do banco de dados: ").strip()

if not DATABASE_URL:
    print("‚ùå URL n√£o fornecida. Saindo.")
    exit()

# Testar a conex√£o
print("\nüîç Testando conex√£o...")
try:
    engine = sqlalchemy.create_engine(DATABASE_URL)
    with engine.connect() as conn:
        result = conn.execute(sqlalchemy.text("SELECT 1 as test"))
        test_value = result.scalar()
        print("‚úÖ Conex√£o bem-sucedida!")
        
        # Verificar se a tabela usuarios existe
        result = conn.execute(sqlalchemy.text("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'usuarios'
        """))
        table_exists = result.fetchone()
        
        if not table_exists:
            print("‚ö†Ô∏è  Tabela 'usuarios' n√£o encontrada. Criando...")
            
            # Criar a tabela
            create_table_sql = """
            CREATE TABLE IF NOT EXISTS usuarios (
                id SERIAL PRIMARY KEY,
                nome VARCHAR(255) NOT NULL,
                email VARCHAR(255) UNIQUE NOT NULL,
                senha_hash TEXT NOT NULL,
                status_assinatura VARCHAR(50) DEFAULT 'ativo',
                ultima_carteira TEXT,
                ultimos_pesos TEXT,
                data_inicio_salva DATE,
                data_fim_salva DATE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """
            conn.execute(sqlalchemy.text(create_table_sql))
            conn.commit()
            print("‚úÖ Tabela 'usuarios' criada com sucesso!")
        else:
            print("‚úÖ Tabela 'usuarios' j√° existe")
            
        # Contar usu√°rios
        result = conn.execute(sqlalchemy.text("SELECT COUNT(*) FROM usuarios"))
        count = result.scalar()
        print(f"üìä Total de usu√°rios: {count}")
        
except Exception as e:
    print(f"‚ùå Erro na conex√£o: {e}")
    exit()

# Salvar no arquivo .env
print("\nüíæ Salvando configura√ß√£o...")
try:
    with open(env_file, 'w') as f:
        f.write(f"DATABASE_URL={DATABASE_URL}\n")
    print("‚úÖ Configura√ß√£o salva em .env")
except Exception as e:
    print(f"‚ö†Ô∏è  Erro ao salvar .env: {e}")

# Criar um usu√°rio de teste
print("\nüë§ Deseja criar um usu√°rio de teste? (s/n)")
criar_usuario = input().strip().lower()

if criar_usuario in ['s', 'sim', 'y', 'yes']:
    print("\n--- Criando Usu√°rio de Teste ---")
    nome = input("Nome: ").strip()
    email = input("Email: ").strip()
    senha = input("Senha: ").strip()
    
    if nome and email and senha:
        try:
            ph = PasswordHasher()
            senha_hash = ph.hash(senha)
            
            with engine.connect() as conn:
                query = sqlalchemy.text("""
                    INSERT INTO usuarios (nome, email, senha_hash, status_assinatura) 
                    VALUES (:nome, :email, :senha_hash, 'ativo')
                """)
                conn.execute(query, {
                    "nome": nome, 
                    "email": email, 
                    "senha_hash": senha_hash
                })
                conn.commit()
                
            print("‚úÖ Usu√°rio criado com sucesso!")
            
            # Testar login
            print("\nüîê Testando login...")
            with engine.connect() as conn:
                query = sqlalchemy.text("SELECT senha_hash FROM usuarios WHERE email = :email")
                result = conn.execute(query, {"email": email}).first()
                
                if result:
                    stored_hash = result[0]
                    try:
                        ph.verify(stored_hash, senha)
                        print("‚úÖ Login testado com sucesso!")
                    except Exception as e:
                        print(f"‚ùå Erro no teste de login: {e}")
                else:
                    print("‚ùå Usu√°rio n√£o encontrado")
                    
        except Exception as e:
            print(f"‚ùå Erro ao criar usu√°rio: {e}")
    else:
        print("‚ùå Dados incompletos")

print("\n‚úÖ Configura√ß√£o conclu√≠da!")
print("\nPr√≥ximos passos:")
print("1. Execute: python criar_usuario.py")
print("2. Execute: python test_login.py")
print("3. Execute: streamlit run app.py")
